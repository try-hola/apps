name: Build and Publish Changed Packages

# Define when this workflow will run
on:
  # Run when code is pushed to the main branch and changes packages directory
  push:
    branches: [main]
    paths:
      - 'packages/**'
  # Also run on pull requests targeting main branch that change packages
  pull_request:
    branches: [main]
    paths:
      - 'packages/**'
  # Allow manual triggering through GitHub UI
  workflow_dispatch:
    inputs:
      package:
        description: 'Specific package to build (leave empty for auto-detection)'
        required: false
        type: string

jobs:
  # First job: Detect which packages have changed
  detect-changes:
    runs-on: ubuntu-latest
    # Define outputs that can be used by other jobs
    outputs:
      changed_packages: ${{ steps.filter.outputs.changes }}
    steps:
      # Check out the repository with full history for diff comparison
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Identify which packages have been modified in this change
      - name: Detect changed packages
        id: filter
        run: |
          # Handle manual trigger with explicit package name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.package }}" != "" ]]; then
            # Format the manually specified package as a JSON array
            CHANGED="[\"${{ github.event.inputs.package }}\"]"
            echo "changes=${CHANGED}" >> $GITHUB_OUTPUT
            echo "Manually selected package: ${CHANGED}"
            exit 0
          fi

          # Determine base and head commits for comparison
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR events, compare PR base to head
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # For push events, compare previous commit to current
            BASE_SHA=${{ github.event.before }}
            HEAD_SHA=${{ github.sha }}
          fi

          # Find all unique package directories that have changes
          # Creates a JSON array of package names using jq
          CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep "^packages/" | cut -d/ -f2 | sort | uniq | jq -R . | jq -s .)
          echo "changes=${CHANGED}" >> $GITHUB_OUTPUT
          echo "Changed packages: ${CHANGED}"
  
  # Second job: Build and publish packages to OCI registry (skipped for PRs)
  build-and-publish:
    # This job depends on detect-changes job completing first
    needs: detect-changes
    # Only run if there are changed packages AND this is not a pull request
    if: ${{ needs.detect-changes.outputs.changed_packages != '[]' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    # Create a matrix to process each changed package in parallel
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed_packages) }}
    
    steps:
      # Check out the repository code
      - uses: actions/checkout@v3
      
      # Authenticate with GitHub Container Registry using the workflow's token
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Install ORAS CLI tool for pushing OCI artifacts
      - name: Install ORAS
        uses: oras-project/setup-oras@v1
        with:
          version: 1.0.0
      
      # Extract the version number from package.json
      - name: Get package version
        id: package-version
        run: |
          VERSION=$(jq -r .version packages/${{ matrix.package }}/package.json)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building ${{ matrix.package }} version ${VERSION}"
      
      # Create a tarball of the package contents including package.json
      - name: Package as tgz
        run: |
          cd packages
          
          # Create temporary directory structure
          mkdir -p temp/${{ matrix.package }}/structure/src
          
          # Copy package.json for metadata preservation
          cp ${{ matrix.package }}/package.json temp/${{ matrix.package }}/structure/
          
          # Copy all source files
          cp -r ${{ matrix.package }}/src/* temp/${{ matrix.package }}/structure/src/
          
          # Create the tarball with both package.json and src contents
          tar -czf ${{ matrix.package }}-v${{ steps.package-version.outputs.version }}.tgz -C temp/${{ matrix.package }}/structure .
          
          # Clean up temporary directory
          rm -rf temp
      
      # Push the package to GitHub Container Registry as an OCI artifact
      - name: Push to GitHub Container Registry using ORAS
        run: |
          cd packages
          
          # Extract OCI annotations from package.json if they exist
          ANNOTATIONS=""
          if jq -e '.oci.annotations' ${{ matrix.package }}/package.json > /dev/null 2>&1; then
            # Process each annotation key-value pair
            while IFS="=" read -r key value; do
              # Replace template variables like ${npm_package_version} with actual version
              value=$(echo "$value" | sed "s/\${npm_package_version}/${{ steps.package-version.outputs.version }}/g")
              ANNOTATIONS="$ANNOTATIONS --annotation $key=$value"
            done < <(jq -r '.oci.annotations | to_entries[] | "\(.key)=\(.value)"' ${{ matrix.package }}/package.json)
          fi
          
          # Push artifact with specific version tag
          echo "Pushing to ghcr.io/${{ github.repository_owner }}/${{ matrix.package }}:${{ steps.package-version.outputs.version }}"
          oras push ghcr.io/${{ github.repository_owner }}/${{ matrix.package }}:${{ steps.package-version.outputs.version }} \
            ${{ matrix.package }}-v${{ steps.package-version.outputs.version }}.tgz $ANNOTATIONS
            
          # Also push the same artifact with 'latest' tag for convenience
          echo "Pushing to ghcr.io/${{ github.repository_owner }}/${{ matrix.package }}:latest"
          oras push ghcr.io/${{ github.repository_owner }}/${{ matrix.package }}:latest \
            ${{ matrix.package }}-v${{ steps.package-version.outputs.version }}.tgz $ANNOTATIONS

  # Third job: Verify package structure and content (runs on PRs only)
  verify-packages:
    # This job depends on detect-changes job completing first
    needs: detect-changes
    # Only run if there are changed packages AND this is a pull request
    if: ${{ needs.detect-changes.outputs.changed_packages != '[]' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    # Create a matrix to process each changed package in parallel
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed_packages) }}
    
    steps:
      # Check out the repository code
      - uses: actions/checkout@v3
      
      # Ensure package.json exists and has required fields
      - name: Validate package.json
        run: |
          if [ ! -f "packages/${{ matrix.package }}/package.json" ]; then
            echo "Error: package.json not found for ${{ matrix.package }}"
            exit 1
          fi
          
          # Extract key fields and verify they exist
          VERSION=$(jq -r .version packages/${{ matrix.package }}/package.json)
          NAME=$(jq -r .name packages/${{ matrix.package }}/package.json)
          
          if [ "$VERSION" == "null" ] || [ -z "$VERSION" ]; then
            echo "Error: Missing version in package.json"
            exit 1
          fi
          
          if [ "$NAME" == "null" ] || [ -z "$NAME" ]; then
            echo "Error: Missing name in package.json"
            exit 1
          fi
          
          echo "Package ${{ matrix.package }} validation passed (version: $VERSION)"
      
      # Verify that docker-compose files exist in the expected location
      - name: Validate docker-compose files
        run: |
          if [ ! -d "packages/${{ matrix.package }}/src" ]; then
            echo "Error: src directory not found for ${{ matrix.package }}"
            exit 1
          fi
          
          # Check for docker-compose.yaml or docker-compose.yml
          COMPOSE_FILE="packages/${{ matrix.package }}/src/docker-compose.yaml"
          if [ ! -f "$COMPOSE_FILE" ] && [ ! -f "${COMPOSE_FILE%.*}.yml" ]; then
            echo "Error: docker-compose.yaml not found in src directory"
            exit 1
          fi
          
          echo "Docker Compose files validation passed"