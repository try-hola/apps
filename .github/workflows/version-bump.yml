name: Automatic Version Bump

# This workflow is manually triggered from the GitHub Actions UI
# It allows you to select a package and bump its version number
on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      package:        # First input: which package to bump
        description: 'Package to bump version for'
        required: true
        type: string
      bump:           # Second input: what kind of version bump
        description: 'Version bump type (patch, minor, major)'
        required: true
        type: choice  # Dropdown menu in the UI
        options:
          - patch     # Increment the third number (1.2.3 → 1.2.4)
          - minor     # Increment the second number (1.2.3 → 1.3.0)
          - major     # Increment the first number (1.2.3 → 2.0.0)
        default: 'patch'

jobs:
  # Main job to bump package version
  bump-version:
    runs-on: ubuntu-latest  # This job runs on the latest Ubuntu runner
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full git history needed for PR creation
      
      # Step 2: Make sure the specified package exists
      - name: Verify package exists
        run: |
          # Check if the package.json file exists for the specified package
          if [ ! -f "packages/${{ github.event.inputs.package }}/package.json" ]; then
            echo "Error: Package ${{ github.event.inputs.package }} not found"
            exit 1  # Fail the workflow if the package doesn't exist
          fi
      
      # Step 3: Set up Node.js (needed for jq command)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Step 4: Calculate the new version number based on the bump type
      - name: Bump version
        id: bump  # ID used to reference outputs from this step
        run: |
          # Path to the package.json file
          PACKAGE_PATH="packages/${{ github.event.inputs.package }}/package.json"
          
          # Get the current version from package.json
          CURRENT_VERSION=$(jq -r .version "$PACKAGE_PATH")
          
          # Extract major.minor.patch components from the version
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Calculate the new version based on the bump type
          if [[ "${{ github.event.inputs.bump }}" == "major" ]]; then
            # Major bump: increment major, reset minor and patch to 0
            NEW_VERSION="$((MAJOR+1)).0.0"
          elif [[ "${{ github.event.inputs.bump }}" == "minor" ]]; then
            # Minor bump: keep major, increment minor, reset patch to 0
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
          else
            # Patch bump: keep major and minor, increment patch
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH+1))"
          fi
          
          # Update the version in package.json
          jq ".version = \"$NEW_VERSION\"" "$PACKAGE_PATH" > tmp.json && mv tmp.json "$PACKAGE_PATH"
          
          # Set the new version as an output variable for later steps
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"
      
      # Step 5: Create a pull request with the version change
      - name: Create version bump PR
        uses: peter-evans/create-pull-request@v5
        with:
          # Commit message for the version change
          commit-message: "chore: bump ${{ github.event.inputs.package }} version to ${{ steps.bump.outputs.new_version }}"
          
          # PR title
          title: "Version Bump: ${{ github.event.inputs.package }} to ${{ steps.bump.outputs.new_version }}"
          
          # PR body with details about the version bump
          body: |
            Automated version bump for ${{ github.event.inputs.package }}
            - Bump type: ${{ github.event.inputs.bump }}
            - New version: ${{ steps.bump.outputs.new_version }}
          
          # Create a new branch for this change
          branch: "version-bump/${{ github.event.inputs.package }}"
          
          # Target branch for the PR
          base: main
          
          # Labels to apply to the PR
          labels: version-bump, automated-pr